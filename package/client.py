from vars_examples import dp, bot
from aiogram import types, Dispatcher
from keyboards import client_keyboard
from package.admin import id
from keyboards.admin_keyboard import admin_menu
from databases import databases_controller
from vars_examples import payment_token
from time import sleep
from aiogram.types.message import ContentType

async def start_bot(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Samurai Food", reply_markup=client_keyboard.main_menu())
    
async def for_help_answer(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç—å —Å –Ω–∞—à–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º)", reply_markup=client_keyboard.help_menu())
    
    
    

async def for_menu_answer(message: types.Message):
    values = await databases_controller.load_menu()
    for item in values:
        url = item[0].split("$")[1]
        price = int(item[3]) * 100
        lblPrice = types.LabeledPrice(label=f"{item[1]}", amount=price)
        await bot.send_invoice(
            message.from_user.id,
            title = f"*{item[1]}*",
            description = f"{item[2]}",
            provider_token=payment_token,
            currency="rub",
            photo_url = f"{url}",
            photo_height=512,
            photo_width=800,
            photo_size=512,
            is_flexible=False,
            prices=[lblPrice],
            need_email=True,
            need_phone_number=True,
            need_shipping_address=True,
            start_parameter="sushi",
            payload=f"–ö–ª–∏–µ–Ω—Ç –∑–∞–∫–∞–∑–∞–ª: {item[1]}"
        )
        
        if item != values[-1]:
            sleep(3)
    
    if payment_token.split(":")[1] == "TEST":
        await bot.send_message(message.from_user.id, "*–í–ù–ò–ú–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–¢–ï–ñ*\n–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏: `1111 1111 1111 1026, 12/22, CVC 000`")


async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        
        
        
async def process_successful_payment(message: types.Message):
    print('successful_payment:')
    pmnt = message.successful_payment.to_python()
    for key, val in pmnt.items():
        print(f'{key} = {val}')

    await bot.send_message(message.chat.id, "*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É*\n–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω! –ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!")


async def for_contacts_answer(message: types.Message):
    await message.reply("–ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: +7**********\n–ù–∞—à–∞ –ø–æ—á—Ç–∞: j*******d@mail.ru")
    
async def for_location_answer(message: types.Message):
    await message.reply("–Ø–ø–æ–Ω–∏—è, –≥. –í–∞—Å–∞–±–∏, —É–ª. –õ–æ—Å–æ—Å—å, –¥.25")
    
async def for_timetable_answer(message: types.Message):
    await message.reply("–ü–Ω-–ü—Ç: 8.00-23.00, –°–±-–í—Å: 9.00-21.00")
    
async def for_backToMenu_answer(message: types.Message):
    await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=client_keyboard.main_menu())


def register_client_handlers(dp: Dispatcher):
    dp.register_message_handler(start_bot, commands=["start"])
    dp.register_message_handler(for_help_answer, lambda message: message.text.startswith("‚ùì–ü–æ–º–æ—â—å‚ùì"))
    dp.register_message_handler(for_menu_answer, lambda message: message.text.startswith("üç±–ú–µ–Ω—éüç±"))
    dp.register_message_handler(for_contacts_answer, lambda message: message.text.startswith("‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è"))
    dp.register_message_handler(for_location_answer, lambda message: message.text.startswith("üåá–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µüåá"))
    dp.register_message_handler(for_timetable_answer, lambda message: message.text.startswith("üìÜ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÜ"))
    dp.register_message_handler(for_backToMenu_answer, lambda message: message.text.startswith("üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—éüîô"))
    dp.register_pre_checkout_query_handler(process_pre_checkout_query, lambda query: True)
    dp.register_message_handler(process_successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT)